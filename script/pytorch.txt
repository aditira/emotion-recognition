## 10 Menit:

**INTRO:**

Selamat datang di tutorial interaktif ini. Hari ini kita akan membahas tentang bagaimana melatih model pengenalan emosi menggunakan PyTorch di Jupyter Notebook. Kami akan menggunakan model pre-trained ResNet18 dan memodifikasi lapisan terakhir untuk tugas kita.

**BODY:**

(0:00 - 1:00)
Pertama, kita akan memulai dengan mempersiapkan semua library yang dibutuhkan seperti PyTorch, torchvision, dan numpy.

(1:00 - 2:00)
Kita akan memuat model pre-trained ResNet dan memodifikasi lapisan terakhir untuk sesuai dengan jumlah kelas emosi kita. Dalam kasus ini, kita memiliki 8 kelas emosi yang berbeda.

(2:00 - 3:00)
Selanjutnya, kita menyiapkan transformasi gambar untuk augmentasi dan normalisasi data. Kita akan mengubah gambar menjadi grayscale dan mengubah ukurannya menjadi 32x32 pixel.

(3:00 - 4:00)
Kemudian kita akan memuat dataset pelatihan dan validasi kita. Dataset ini sudah kita siapkan di folder 'dataset/kaggle'. Kita juga menyiapkan DataLoader dengan batch size 32.

(4:00 - 5:00)
Disini kita menampilkan distribusi label dari data kita dalam bentuk bar chart.

(5:00 - 6:00)
Setelah itu, kita menentukan perangkat tempat model akan dilatih - CPU atau GPU. Kita juga menentukan Cross Entropy sebagai fungsi loss dan Adam sebagai optimizer.

(6:00 - 7:00)
Untuk memulai pelatihan, kita mendefinisikan fungsi `train_one_epoch` dan `validate_one_epoch`. Fungsi ini akan melalui setiap batch data, menerapkan model, menghitung kerugian, dan memperbarui bobot model.

(7:00 - 8:00)
Kita pelatihan model kita untuk jumlah epoch yang telah ditentukan. Di setiap epoch, model kita melakukan fase pelatihan dan validasi. Kami mencetak kerugian dan akurasi untuk setiap fase.

(8:00 - 9:00)
Setelah semua epoch selesai, kita mencetak akurasi validasi terbaik dan memuat bobot model terbaik ke dalam model kita.

(9:00 - 10:00)
Kemudian kita menampilkan plot loss dan akurasi dari model selama proses training dan validasi.

(10:00 - 11:00)
Akhirnya, kita menyimpan model yang telah dilatih ke dalam file dengan format .pth, siap untuk digunakan dalam proses prediksi atau evaluasi selanjutnya.

**CLOSING:**

Itu semua untuk tutorial ini. Dengan ini, kita telah belajar cara melatih model pengenalan emosi menggunakan PyTorch dan bagaimana kita dapat mengubahnya untuk tugas khusus kita. Terima kasih dan semoga bermanfaat.


## Detailed:

**INTRO:**

Selamat datang di tutorial interaktif ini. Hari ini kita akan membahas tentang bagaimana melatih model pengenalan emosi menggunakan PyTorch di Jupyter Notebook. Kami akan menggunakan model pre-trained ResNet18 dan memodifikasi lapisan terakhir untuk tugas kita.

**BODY:**

(0:00 - 1:00)
Pertama, kita memulai dengan mempersiapkan semua library yang dibutuhkan seperti PyTorch, torchvision, dan numpy.

(1:00 - 2:00)
Kita memuat model pre-trained ResNet dan memodifikasi lapisan terakhir untuk sesuai dengan jumlah kelas emosi kita. Dalam kasus ini, kita memiliki 8 kelas emosi yang berbeda.

(2:00 - 3:00)
Selanjutnya, kita menyiapkan transformasi gambar untuk augmentasi dan normalisasi data. Kita akan mengubah gambar menjadi grayscale dan mengubah ukurannya menjadi 32x32 pixel.

(3:00 - 4:00)
Kemudian kita memuat dataset pelatihan dan validasi kita. Dataset ini sudah kita siapkan di folder 'dataset/kaggle'. Kita juga menyiapkan DataLoader dengan batch size 32.

(4:00 - 5:00)
Disini kita menampilkan distribusi label dari data kita dalam bentuk bar chart.

(5:00 - 6:00)
Setelah itu, kita menentukan perangkat tempat model akan dilatih - CPU atau GPU. Kita juga menentukan Cross Entropy sebagai fungsi loss dan Adam sebagai optimizer.

(6:00 - 8:00)
Sekarang kita beralih ke bagian yang paling penting dari proses ini: fase pelatihan dan validasi. Sebelum memulai pelatihan, kita mendefinisikan dua fungsi yang membantu dalam proses ini: `train_one_epoch` dan `validate_one_epoch`.

Fungsi `train_one_epoch` digunakan untuk melatih model selama satu epoch. Dalam fungsi ini, kita terlebih dahulu mengatur model dalam mode train. Kemudian, kita mengiterasi semua batch data dari DataLoader pelatihan.

(8:00 - 10:00)
Untuk setiap batch, kita memuat input dan label, dan memindahkannya ke perangkat yang sesuai. Kita mengatur gradien ke nol, melakukan forward pass dengan memasukkan input ke dalam model, dan mendapatkan output. Kita kemudian menghitung kerugian menggunakan output dan label. 

(10:00 - 12:00)
Kita kemudian melakukan backward pass dan memperbarui bobot model menggunakan optimizer. Kita mengumpulkan kerugian dan metriks akurasi selama proses ini.

(12:00 - 14:00)
Fungsi `validate_one_epoch` mirip dengan `train_one_epoch`, namun tidak melakukan backward pass atau pembaruan bobot. Fungsi ini digunakan untuk mengevaluasi model pada data validasi.

(14:00 - 16:00)
Setelah mendefinisikan kedua fungsi ini, kita bisa melanjutkan ke proses pelatihan utama. Kita mengeksekusi semua epoch yang telah ditentukan. Di setiap epoch, kita melakukan fase pelatihan dan validasi.

(16:00 - 18:00)
Selama fase pelatihan, kita memanggil fungsi `train_one_epoch` dan melakukan satu langkah menggunakan scheduler. Kita kemudian menghitung kerugian dan akurasi rata-rata untuk epoch tersebut dan mencetaknya.

(18:00 - 20:00)
Selama fase validasi, kita memanggil fungsi `validate_one_epoch` dan menghitung kerugian dan akurasi rata-rata untuk data validasi. Kita mencetak metrics ini juga.

(20:00 - 22:00)
Setiap kali kita mendapatkan akurasi validasi yang lebih baik, kita membuat salinan dari bobot model. Setelah semua epoch selesai, kita memuat bobot terbaik ke dalam model kita.

(22:00 - 23:00)
Kemudian kita menampilkan plot loss dan akurasi dari model selama proses training dan validasi.

(23:00 - 24:00)
Akhirnya, kita menyimpan model yang telah dilatih ke dalam file dengan format .pth, siap untuk digunakan dalam proses prediksi atau evaluasi selanjutnya.

**

**CLOSING:**

(24:00 - 25:00)
Setelah model disimpan, sekarang kita bisa menggunakan model yang telah dilatih untuk prediksi emosi dari gambar. Kita mendefinisikan fungsi `predict_image` untuk melakukan hal ini.

(25:00 - 26:00)
Fungsi ini menerima model yang telah disimpan dan jalur ke gambar yang ingin kita prediksi. Gambar dibuka dan ditampilkan menggunakan matplotlib. 

(26:00 - 27:00)
Kita kemudian melakukan transformasi yang sama pada gambar ini seperti yang kita lakukan pada data pelatihan dan validasi. Terutama, kita mengubah ukuran gambar, mengubahnya menjadi tensor, dan mengatur perangkat yang akan digunakan.

(27:00 - 28:00)
Dengan torch.no_grad (karena kita tidak membutuhkan gradien saat inferensi), kita memasukkan gambar yang telah ditransformasi ke model yang telah dilatih dan mendapatkan output. Output ini diubah menjadi probabilitas menggunakan fungsi softmax.

(28:00 - 29:00)
Kita kemudian mencetak setiap label emosi dengan probabilitasnya yang sesuai. Proses ini memberi kita gambaran tentang bagaimana model kita mengklasifikasikan gambar yang diberikan.

(29:00 - 30:00)
Akhirnya, kita menguji model kita dengan memanggil fungsi `predict_image` pada beberapa sampel gambar. Ini memberikan kita gambaran tentang seberapa baik model kita bekerja.

(30:00 - 31:00)
Itu semua untuk tutorial ini. Dengan tutorial ini, kita telah belajar cara melatih model pengenalan emosi menggunakan PyTorch dan bagaimana kita dapat mengubahnya untuk tugas khusus kita.

(31:00 - 32:00)
Teknik ini dapat digunakan untuk berbagai tugas pengenalan gambar lainnya juga. Yang perlu Anda lakukan adalah mempersiapkan dataset Anda dan mengubah bagian yang sesuai dari kode ini.

**OUTRO:**

(32:00 - 33:00)
Terima kasih telah mengikuti tutorial ini. Kami berharap Anda menemukan tutorial ini informatif dan bahwa ini akan membantu Anda dalam proyek pengenalan emosi atau klasifikasi gambar Anda sendiri. Selamat belajar dan terus eksplorasi dunia AI!